[{"title":"Dart介绍 环境搭建 开发工具配置","url":"/article/18850323.html","content":"Dart 介绍\n​    Dart是由谷歌开发的计算机编程语言, 它可以用于web、服务器、移动应用和物联网等领域的开发。\n​    Dart诞生于2011年，号称要取代JavaScript。但是过去几年一直不温不火，直到Flutter的出现现在被人们重新重视要学Flutter的话我们首先得会Dart。\n\nDart官网\n\nDart 环境搭建\n要在本地开发Dart的话首先需要安装Dart SDK\n\n官方文档\n\n系统要求Dart SDK支持在Windows, Linux 和 macOS上使用。\n\n\n\n\nWindows\nmacOS\nLinux\n\n\n\n支持  版本\nWindows 10\n最新的三个主要版本\n最近的Linux版本，但只测试了Ubuntu 16.04\n\n\n支持  架构\nx64，ia32\nx64, 对arm64的支持正在进行中\nx64, ia32, arm, arm64\n\n\n\n搭建环境WindowsWindows(推荐)\nmacOS如果Mac没有安装brew工具首先得安装它\nbrew tap dart-lang/dartbrew install dart\n\nLinux如果你在AMD64(64-bit Intel)上使用Debian/Ubuntu，你可以选择以下选项之一，这两种选项都可以在新版本发布时自动更新SDK。\n\nInstall using apt-get\nInstall a Debian package\n\n使用 apt-get 安装\n执行以下代码一次性设置:\n$ sudo apt-get update$ sudo apt-get install apt-transport-https$ sudo sh -c &#x27;wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -&#x27;$ sudo sh -c &#x27;wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list &gt; /etc/apt/sources.list.d/dart_stable.list&#x27;\n\n然后安装Dart SDK:\n$ sudo apt-get update$ sudo apt-get install dart\n\n安装Debian软件包\n或者，下载Dart SDK的Debian软件包格式为..deb\n修改PATH以访问所有Dart二进制文件\n安装SDK后，将其bin目录添加到您的PATH中。例如，在活动终端会话中使用以下命令更改：PATH\n$ export PATH=&quot;$PATH:/usr/lib/dart/bin&quot;\n\n要更改未来终端会话的PATH，使用如下命令：\n$ echo &#x27;export PATH=&quot;$PATH:/usr/lib/dart/bin&quot;&#x27; &gt;&gt; ~/.profile\n\nDart 开发工具\nDart的开发工具有很多，如：VScode、Android Studio、IntelliJ IDEA、WebStorm等\n本人主要使用VScode，因此只写VScode中配置Dart过程。\nVScode具体安装过程自行百度解决。\nVScode搭建Dart环境\n找到VScode插件安装项搜索并安装Dart\n找到VScode插件安装Code Runner(用来运行Dart程序)\n\n","categories":["Dart"],"tags":["Learn"]},{"title":"Dart数据类型详解[int double String bool List Maps]","url":"/article/ad9f66d5.html","content":"待更新Dart 数据类型常用数据类型\n\n\n编号\n数据类型\n包含\n\n\n\n1\nNumbers(数值)\nint、double\n\n\n2\nStrings(字符串)\nString\n\n\n3\nBooleans(布尔)\nbool\n\n\n4\nList(数组)\n在Dart中，数组是列表对象，故称之为列表\n\n\n5\nMaps(字典)\nMap是一个键值对相关的对象。键和值可以是仍和对象。每个键只出\n\n\n字符串类型void main() &#123;\t//1.字符串几种定义方式        var str = &#x27;this is str&#x27;;    print(str);        //指定变量类型    String str1 = &#x27;this is str&#x27;    print(str1)    String str2 = &#x27;&#x27;&#x27;    this is str    this is str1    this is str2    &#x27;&#x27;&#x27;        //2.字符串的拼接&#125;\n\n","categories":["Dart"],"tags":["Learn"]},{"title":"Dart入口方法 Print函数 注释 变量 常量和命名规则","url":"/article/29bf6046.html","content":"Dart 入口方法什么是入口方法？在Dart中所有需要被执行的代码都得放在入口方法main里面。\n入口方法 main 的使用// 一个简单的`main`main() &#123;    &#125;\n\nPrint 函数的使用main() &#123;    print(&#x27;Hello World!&#x27;);&#125;/* * 执行输出: * &gt;&gt; Hellow World! */\n\nvoid main() &#123;    Print(&#x27;Hello World!&#x27;);&#125;// `void` 表示`mian`方法没有返回值\n\n注释的使用// 这是单行注释/// 这是文档注释(推荐)/** ** 这也是文档注释 ** 此方法可以多行 **//* * 这里面可以写多行内容 * 多行.. * 多行... */\n\n变量的使用Dart 是一个强大的脚本类型语言，可以不预先定义变量类型，会自动进行类型推导。\nDart 中定义变量可以通过var关键字或类型关键词如String，来申明变量。\nvoid mian() &#123;    var str = &#x27;Hellow World!&#x27;;    print(str);&#125;// 一个简单的字符串类型变量使用/* * 执行输出: * &gt;&gt; Hellow World! */\n\nvoid mian() &#123;    var myNum = 123;    print(myNum);&#125;// 一个简单的数字类型变量使用/* * 执行输出: * &gt;&gt; 123 */\n\nvoid mian() &#123;    String str = &#x27;Hellow World!&#x27;;    print(str);&#125;// 指定变量类型为String/* * 执行输出: * &gt;&gt; Hellow World! */\n\nvoid mian() &#123;    int myNum = 123;    print(myNum);&#125;// 指定变量类型为int/* * 执行输出: * &gt;&gt; 123 */\n\n常量的使用final 和 const 修饰符\nconst值不变 一开始就得赋值\nfinal开始可以不赋值 只能赋一次；而final不仅有const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，及在运行时第一次使用前才初始化。请使用final或const修饰它，而不是使用var或其他变量类型。\nvoid main() &#123;    var str = &#x27;This is a str&#x27;;    str = &#x27;Hello World!&#x27;;    print(str);&#125;// 简单的字符串类型变量(可改变)/* * 执行输出: * &gt;&gt; Hellow World! */\n\nvoid main() &#123;    int myNum = 123;    myNum = 321;    print(myNum);&#125;// 简单的数字类型变量(可改变)/* * 执行输出: * &gt;&gt; 321 */\n\nvoid main() &#123;    const PI = 3.14159;    print(PI);&#125;// const 常量(不可改变)/* * 执行输出: * &gt;&gt; 3.14159 */\n\nvoid main() &#123;    final PI = 3.14159;    print(PI);&#125;// final 常量(不可改变)/* * 执行输出: * &gt;&gt; 3.14159 */\n\nvoid main() &#123;    final time = new DateTime.now();    print(time);&#125;/* * 执行输出: * &gt;&gt; yyyy-MM-dd HH:mm:ss */\n\n错误使用\nvoid main() &#123;    const PI = 3.14159;    PI = 123.1234; // 错误写法，常量不可修改    print(PI);&#125;// 注意：const 常量(不可改变) 请不要试图修改常量/* * 执行将会报错 */\n\nvoid main() &#123;    final PI = 3.14159;    PI = 123.1234; // 错误写法，常量不可修改    print(PI);&#125;// 注意：final 常量(不可改变) 请不要试图修改常量/* * 执行将会报错 */\n\nvoid main() &#123;    const time = new DateTime.now();    // 错误使用，请看`final`和`const`的区别    print(time);&#125;/* * 执行将会报错 */\n\n\nfinal和const的区别：final开始可以不赋值 只能赋一次；而final不仅有const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，及在运行时第一次使用前才初始化。\n注：当需要调用方法赋给常量时请务必使用final\n\n变量的命名规则\n变量名称必须由数字、字母、下划线和美元符($)组成\n注意：标识符开头不能是数字\n标识符不能是保留字和关键字\n变量的名称是区分大小写的，如：age和Age是不同的变量\n标识符(变量名称)一定要见名思意：变量名建议使用名词，方法名称建议使用动词，养成良好命名习惯并在代码中加入一些空格将让你的代码看着很养眼\n\n","categories":["Dart"],"tags":["Learn"]},{"title":"米瑞科技&IZUAL-Logo正式完成!","url":"/article/f9eff0c7.html","content":"米瑞科技&amp;IZUAL-Logo正式完成!历经三个星期时间，米瑞科技&amp;IZUAL的Logo完成咯~\n下面放图：\n\n\n\n","categories":["Company"],"tags":["Miracle"]},{"title":"钢铁是怎样炼成的 - 职务分配","url":"/article/5c2de6.html","content":"钢铁是怎样炼成的 - 职务分配\n组长：张乐天\n文案：袁朝\n全部制作…：缪佳琦\n演讲：丁炎、于佳越、龚子豪\n\n\n","categories":["School"],"tags":["School"]}]