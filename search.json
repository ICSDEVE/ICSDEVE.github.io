[{"title":"Dart入口方法 Print函数 注释 变量 常量和命名规则","url":"/article/29bf6046.html","content":"Dart 入口方法什么是入口方法？在Dart中所有需要被执行的代码都得放在入口方法main里面。\n入口方法 main 的使用// 一个简单的`main`main() &#123;    &#125;\n\nPrint 函数的使用main() &#123;    print(&#x27;Hello World!&#x27;);&#125;/* * 执行输出: * &gt;&gt; Hellow World! */\n\nvoid main() &#123;    Print(&#x27;Hello World!&#x27;);&#125;// `void` 表示`mian`方法没有返回值\n\n注释的使用// 这是单行注释/// 这是文档注释(推荐)/** ** 这也是文档注释 ** 此方法可以多行 **//* * 这里面可以写多行内容 * 多行.. * 多行... */\n\n变量的使用Dart 是一个强大的脚本类型语言，可以不预先定义变量类型，会自动进行类型推导。\nDart 中定义变量可以通过var关键字或类型关键词如String，来申明变量。\nvoid mian() &#123;    var str = &#x27;Hellow World!&#x27;;    print(str);&#125;// 一个简单的字符串类型变量使用/* * 执行输出: * &gt;&gt; Hellow World! */\n\nvoid mian() &#123;    var myNum = 123;    print(myNum);&#125;// 一个简单的数字类型变量使用/* * 执行输出: * &gt;&gt; 123 */\n\nvoid mian() &#123;    String str = &#x27;Hellow World!&#x27;;    print(str);&#125;// 指定变量类型为String/* * 执行输出: * &gt;&gt; Hellow World! */\n\nvoid mian() &#123;    int myNum = 123;    print(myNum);&#125;// 指定变量类型为int/* * 执行输出: * &gt;&gt; 123 */\n\n常量的使用final 和 const 修饰符\nconst值不变 一开始就得赋值\nfinal开始可以不赋值 只能赋一次；而final不仅有const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，及在运行时第一次使用前才初始化。请使用final或const修饰它，而不是使用var或其他变量类型。\nvoid main() &#123;    var str = &#x27;This is a str&#x27;;    str = &#x27;Hello World!&#x27;;    print(str);&#125;// 简单的字符串类型变量(可改变)/* * 执行输出: * &gt;&gt; Hellow World! */\n\nvoid main() &#123;    int myNum = 123;    myNum = 321;    print(myNum);&#125;// 简单的数字类型变量(可改变)/* * 执行输出: * &gt;&gt; 321 */\n\nvoid main() &#123;    const PI = 3.14159;    print(PI);&#125;// const 常量(不可改变)/* * 执行输出: * &gt;&gt; 3.14159 */\n\nvoid main() &#123;    final PI = 3.14159;    print(PI);&#125;// final 常量(不可改变)/* * 执行输出: * &gt;&gt; 3.14159 */\n\nvoid main() &#123;    final time = new DateTime.now();    print(time);&#125;/* * 执行输出: * &gt;&gt; yyyy-MM-dd HH:mm:ss */\n\n错误使用\nvoid main() &#123;    const PI = 3.14159;    PI = 123.1234; // 错误写法，常量不可修改    print(PI);&#125;// 注意：const 常量(不可改变) 请不要试图修改常量/* * 执行将会报错 */\n\nvoid main() &#123;    final PI = 3.14159;    PI = 123.1234; // 错误写法，常量不可修改    print(PI);&#125;// 注意：final 常量(不可改变) 请不要试图修改常量/* * 执行将会报错 */\n\nvoid main() &#123;    const time = new DateTime.now();    // 错误使用，请看`final`和`const`的区别    print(time);&#125;/* * 执行将会报错 */\n\n\nfinal和const的区别：final开始可以不赋值 只能赋一次；而final不仅有const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，及在运行时第一次使用前才初始化。\n注：当需要调用方法赋给常量时请务必使用final\n\n变量的命名规则\n变量名称必须由数字、字母、下划线和美元符($)组成\n注意：标识符开头不能是数字\n标识符不能是保留字和关键字\n变量的名称是区分大小写的，如：age和Age是不同的变量\n标识符(变量名称)一定要见名思意：变量名建议使用名词，方法名称建议使用动词，养成良好命名习惯并在代码中加入一些空格将让你的代码看着很养眼\n\n","categories":["Dart"],"tags":["Learn"]},{"title":"Dart介绍 环境搭建 开发工具配置","url":"/article/18850323.html","content":"Dart 介绍\n​    Dart是由谷歌开发的计算机编程语言, 它可以用于web、服务器、移动应用和物联网等领域的开发。\n​    Dart诞生于2011年，号称要取代JavaScript。但是过去几年一直不温不火，直到Flutter的出现现在被人们重新重视要学Flutter的话我们首先得会Dart。\n\nDart官网\n\nDart 环境搭建\n要在本地开发Dart的话首先需要安装Dart SDK\n\n官方文档\n\n系统要求Dart SDK支持在Windows, Linux 和 macOS上使用。\n\n\n\n\nWindows\nmacOS\nLinux\n\n\n\n支持  版本\nWindows 10\n最新的三个主要版本\n最近的Linux版本，但只测试了Ubuntu 16.04\n\n\n支持  架构\nx64，ia32\nx64, 对arm64的支持正在进行中\nx64, ia32, arm, arm64\n\n\n\n搭建环境WindowsWindows(推荐)\nmacOS如果Mac没有安装brew工具首先得安装它\nbrew tap dart-lang/dartbrew install dart\n\nLinux如果你在AMD64(64-bit Intel)上使用Debian/Ubuntu，你可以选择以下选项之一，这两种选项都可以在新版本发布时自动更新SDK。\n\nInstall using apt-get\nInstall a Debian package\n\n使用 apt-get 安装\n执行以下代码一次性设置:\n$ sudo apt-get update$ sudo apt-get install apt-transport-https$ sudo sh -c &#x27;wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -&#x27;$ sudo sh -c &#x27;wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list &gt; /etc/apt/sources.list.d/dart_stable.list&#x27;\n\n然后安装Dart SDK:\n$ sudo apt-get update$ sudo apt-get install dart\n\n安装Debian软件包\n或者，下载Dart SDK的Debian软件包格式为..deb\n修改PATH以访问所有Dart二进制文件\n安装SDK后，将其bin目录添加到您的PATH中。例如，在活动终端会话中使用以下命令更改：PATH\n$ export PATH=&quot;$PATH:/usr/lib/dart/bin&quot;\n\n要更改未来终端会话的PATH，使用如下命令：\n$ echo &#x27;export PATH=&quot;$PATH:/usr/lib/dart/bin&quot;&#x27; &gt;&gt; ~/.profile\n\nDart 开发工具\nDart的开发工具有很多，如：VScode、Android Studio、IntelliJ IDEA、WebStorm等\n本人主要使用VScode，因此只写VScode中配置Dart过程。\nVScode具体安装过程自行百度解决。\nVScode搭建Dart环境\n找到VScode插件安装项搜索并安装Dart\n找到VScode插件安装Code Runner(用来运行Dart程序)\n\n","categories":["Dart"],"tags":["Learn"]},{"title":"Dart数据类型详解[int double String bool List Maps]","url":"/article/ad9f66d5.html","content":"待更新Dart 数据类型常用数据类型\n\n\n编号\n数据类型\n包含\n\n\n\n1\nNumbers(数值)\nint、double\n\n\n2\nStrings(字符串)\nString\n\n\n3\nBooleans(布尔)\nbool\n\n\n4\nList(数组)\n在Dart中，数组是列表对象，故称之为列表\n\n\n5\nMaps(字典)\nMap是一个键值对相关的对象。键和值可以是仍和对象。每个键只出\n\n\n字符串类型void main() &#123;\t//1.字符串几种定义方式        var str = &#x27;this is str&#x27;;    print(str);        //指定变量类型    String str1 = &#x27;this is str&#x27;    print(str1)    String str2 = &#x27;&#x27;&#x27;    this is str    this is str1    this is str2    &#x27;&#x27;&#x27;        //2.字符串的拼接&#125;\n\n","categories":["Dart"],"tags":["Learn"]},{"title":"GitHub宣布已将所有代码永久封存于北极地底1000年!","url":"/article/5a8f531a.html","content":"你的代码要被存在北极1000年！GitHub启动代码永久存储计划！近日，GitHub 年度开发者大会 GitHub Universe 2019 宣布了一项永久保存代码计划——GitHub Archive Program！\n\nGithub认为世界发展是由开源软件提供动力，开源软件是现代文明隐藏的基石，也是全人类的共同遗产，而GitHub Archive Program的任务就是为子孙后代保留源代码，至少1000年！\n只要你2月2日以前贡献过的开源代码，现在都已经被埋在北极的冰雪之下，保存一千年。\n\n根据GitHub活动页面上的信息，这个活动将在2020年2月2日正式开始，目前网站上连倒计时牌都有了。\n\n该项目是由GitHub与Long Now Foundation，全球互联网档案库，软件遗产基金会，北极世界档案馆，微软研究院，Bodleian图书馆和斯坦福大学图书馆等机构合作。\n据GitHub官方统计，已经有数百万的程序为这个北极代码仓库（Arctic Code Vault）计划做出了贡献。\n为了表彰这些程序员们，GitHub还设计了荣誉徽章。只要鼠标在开发者主页资料介绍部分悬停，就能看到有哪些项目被放到了北极。\n\n为什么Github要使用多种形式的存储方式？\nGithub表示：”尽管全球灾难发生的可能性很低，但是我们所有存储在现代媒体上的东西很可能在几代后就会丢失，跨多个组织和存储形式的归档软件将有助于确保其长期保存，在线归档员将其称为“ LOCKSS”，因为大量副本可以确保安全。”\n\n硬盘，SSD，CD可以使用几十年，备份磁带名义上只有 30 年的寿命，而且是要在严格控制的热度和湿度的条件下，尽管某些硬件的寿命可能会长一点，但是在未来未必还存在能够运行它们的现代计算机，所以，GitHub Archive Program就是为了解决数据流失的风险。\n灵活的代码保存方式\n在Long Now创始人Steward Brand的启发下，Github采用了”分层”策略来归档代码。通过提供从实时到长期存储的一系列解决方案，该方法旨在最大程度地提高灵活性和耐用性。存档程序分为三类：热门，一般和冷门。\n\n热门：接近实时更新\n一般：每月或每年更新一次\n冷门：每 5 年以上更新一次\n\n一串代码的北极之旅\n本来GitHub在去年11月的Universe 2019大会上公布了这项激动人心的计划：将开源代码作为人类文明的火种留给后台，放在一个环境稳定、远离人类战火的地方。\n具体的存放位置是在北极圈内一个岛上的地窖里，这个岛位于下面地图中最北边的红圈。\n\n今年2月2日，GitHub对网站上所有开源项目进行了一次快照存档，然后计划让团队成员亲自护送这批代码到北极。\n然而万万没想到，新冠疫情爆发了。GitHub团队只能与合作方，也就是胶片数据存储公司Piql保持远程联系。\n他们先将21TB的代码数据交到这家公司位于挪威德拉门的工厂。代码被写在了186箱胶片里，胶片每帧都包含880万个像素点，源代码以QR码的形式存储其中。\n\n然后这186箱胶片被运到挪威首都奥斯陆，装上飞机运往距离欧洲大陆北部1000公里远的斯瓦尔巴群岛。\n\n代码最终降落在斯瓦尔巴群岛上一个只有几千人的小镇朗伊尔城。这里人迹罕至、气温寒冷，有几百米厚的冻土层，非常适宜存放胶片。\n\n当地的山上有个退役煤矿，相当于一座人类文明的“诺亚方舟”，许多国际组织在这里存放重要物品，还有一个保存全世界农作物种子的全球种子库，GitHub的代码就被安放在这里，预计可以保存1000年以上。\n\nGitHub Arctic Code Vault（北极）\nGithub说的这个”北极代码库”位于挪威斯瓦尔巴群岛的一个废弃煤矿中，比北极圈更靠近北极，永久冻土层深达250米。斯瓦尔巴群岛受国际《斯瓦尔巴群岛条约》的管制，属于非军事区。它是世界上最北端的城镇的所在地，是地球上最偏远和地缘政治最稳定的人类居住地之一。\n\n\n\nAWA 是挪威国有采矿公司 Store Norske Spitsbergen Kulkompani（SNSK）与长期数字存储提供商 Piql AS 的一项联合计划。 AWA 致力于永久保存档案，胶片卷轴将被存储在位于斯瓦尔巴群岛偏远群岛一座废弃煤矿密封室内的钢壁容器中。\n尽管斯瓦尔巴群岛受到气候变化的影响，但在可预见的将来，可能只会影响到最外面几米的永久冻土，预计变暖不会威胁稳定性。这让斯瓦尔巴群岛成为人类共同知识遗产的稳定、长期的档案库的绝佳位置。\n未来将用玻璃存代码\n用胶片存代码不是GitHub的唯一手段。被微软收购后，GitHub将有幸尝试微软的最新“黑科技”。\n去年微软对外公布了一个Project Silica项目，就是用激光刻蚀石英玻璃来存储数据。石英玻璃是一种耐用的存储介质，抗电磁干扰、抗水、抗热，可提供保存数据长达几万年之久。\n\n\nGitHub说，石英玻璃是永远为后代保留世界开源软件的理想存储介质，所以将这项黑科技作为新的代码保存手段。\n现在，GitHub已经在玻璃中存档了6000个世界上最受欢迎的开源存储库。等到该技术成熟且成本下降后，应该会有更多的代码被写到玻璃中。\n网友们看到这个消息后，都乐了，纷纷表示自己的bug再也洗不白了！\n\n\n- EOF -\n官方博客\n\n","categories":["News"],"tags":["Github"]},{"title":"感悟人生-随笔","url":"/article/a46b77f.html","content":"感悟人生-随笔\n&ensp;&ensp;人生，由我不由天，幸福，由心不由境。不管遇到什么，都是一个风景，都是一个刻苦铭心，即使是最平淡的过往。无论灿烂与否，都是一个完整的人生，若有缺憾，只能说是不懂罢了。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;——题记\n\n​    \n&ensp;&ensp;&ensp;&ensp;这三年，是人生长河里短短的一瞬间，但却是我记忆力绵长的一生。&ensp;&ensp;&ensp;&ensp;光阴似箭，岁月如梭。三年的时光即将结束。在这三年里，我感悟到了很多人生道理，做人原则。\n总结如下：&ensp;&ensp;&ensp;&ensp;一、&ensp;&ensp;&ensp;&ensp;人的一生，没有谁事事得意，处处风光。告诉自己淡然一些，看开一点，生活的过程中保持一种平常的心态，你会愉快。没人知道，痛苦会在哪个时段出现；也没人清楚，烦恼会在哪个时段出现。我们能做的，就是做好自己。珍惜拥有，不管今后遭遇多大困难，不论以后碰到多少不快，我们都应该真诚相处，坦诚相待。&ensp;&ensp;&ensp;&ensp;二、&ensp;&ensp;&ensp;&ensp;何为朋友？当别人相信你脸上的微笑时，他能读懂你眼中的哀伤；他隐匿在你觥筹交错之后，现身于你的困顿烦忧之中；当你得志时，他站在远处，静观你的人来客往，当你失意时，他无声的走近，送上一缕至诚的阳光；和他可以长别、可以久无音讯，也可以相视无言，不必时时都想起，想起皆在温暖处。&ensp;&ensp;&ensp;&ensp;三、&ensp;&ensp;&ensp;&ensp;有时，珍惜，是为了更好的拥有；而放下，则是为了更好的前行。好与不好都走了，幸与不幸都过了。人生的际遇，就像那窗外的雨，淋过，湿过；散了，远了。容不得我们许与不许，便已然不再。于是，人生，便总是从告别中走向明天，将美好留在心底，淡然就好；将悲伤至于脑后，遗忘了最好。&ensp;&ensp;&ensp;&ensp;四、&ensp;&ensp;&ensp;&ensp;前行总会有坎坷，飞翔，会有阻隔，心随路转，心路常宽，学会转弯才算明智。无论什么事，无谓的坚持不一定成功。改变一下思路，往往会柳暗花明，豁然开朗。生活，无论多么不开心，也要继续；人生，无论多么不如意，也不能停步。顺其自然，随心而为，做真实的自己。让生命少些遗憾，让人生多些无悔。&ensp;&ensp;&ensp;&ensp;五、&ensp;&ensp;&ensp;&ensp;人生，很难称心；生活，很难如意。朋友不必高低，要相互真诚；穿着不比贵贱，要合身得体；房子不比大小，要舒适温暖；车子不比名气，要一路平安；长相不比美丑，要心态平衡；身体不比胖瘦，要健康无病；财富不比有无，要节俭会理；生活不比奢侈，要知足常乐。&ensp;&ensp;&ensp;&ensp;六、&ensp;&ensp;&ensp;&ensp;不要为了生活琐事影响了情绪，让心情永远是人生追寻的主旋律；不要用自己的标准要求别人，授受别人的强大，接受别人的缺点与性格缺陷，允许他人没素质，人无完人；尽量别纠结了自己，又打扰了别人；对生活再不满意，时间也不会过的再慢些，所以长点心吧：该吃吃该喝喝，凡是别往心里搁。&ensp;&ensp;&ensp;&ensp;七、&ensp;&ensp;&ensp;&ensp;每个人，做自己喜欢的事儿，因为喜欢，再苦再累也不觉得，所以人尽其乐很重要；温和与粗暴，主动做事与被动做事儿，前者会积极，后者会消极，效率肯定不同。所以思想工作很重要，熟悉的环境与陌生的环境，同样的事情，前者轻车熟路，轻松搞定，而后者会茫然失措，艰难无比，所以适应环境很重要。\n","categories":["Daily"],"tags":["Life"]},{"title":"米瑞科技&IZUAL-Logo正式完成!","url":"/article/f9eff0c7.html","content":"米瑞科技&amp;IZUAL-Logo正式完成!历经三个星期时间，米瑞科技&amp;IZUAL的Logo完成咯~\n下面放图：\n\n\n\n","categories":["Company"],"tags":["Miracle"]},{"title":"钢铁是怎样炼成的 - 职务分配","url":"/article/5c2de6.html","content":"钢铁是怎样炼成的 - 职务分配\n组长：张乐天\n文案：袁朝\n全部制作…：缪佳琦\n演讲：丁炎、于佳越、龚子豪\n\nOkey…\nUpdate:\n组长：缪佳琦\n文案：缪佳琦\n制作：缪佳琦\n演讲：缪佳琦\n\n🐱‍👤终究是一人扛下了所有🦜\n\n","categories":["School"],"tags":["School"]}]