<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jehovah&#39;s Blog</title>
  
  
  <link href="https://blog.icscraft.top/atom.xml" rel="self"/>
  
  <link href="https://blog.icscraft.top/"/>
  <updated>2021-05-23T22:12:18.855Z</updated>
  <id>https://blog.icscraft.top/</id>
  
  <author>
    <name>Jehovah</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub宣布已将所有代码永久封存于北极地底1000年!</title>
    <link href="https://blog.icscraft.top/article/5a8f531a.html"/>
    <id>https://blog.icscraft.top/article/5a8f531a.html</id>
    <published>2021-05-23T13:22:34.000Z</published>
    <updated>2021-05-23T22:12:18.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你的代码要被存在北极1000年！GitHub启动代码永久存储计划！"><a href="#你的代码要被存在北极1000年！GitHub启动代码永久存储计划！" class="headerlink" title="你的代码要被存在北极1000年！GitHub启动代码永久存储计划！"></a>你的代码要被存在北极1000年！GitHub启动代码永久存储计划！</h1><p>近日，GitHub 年度开发者大会 GitHub Universe 2019 宣布了一项永久保存代码计划——<strong>GitHub Archive Program！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/GitHub%20Archive%20Program.jpg"></p><p>Github认为世界发展是由开源软件提供动力，开源软件是现代文明隐藏的基石，也是全人类的共同遗产，而GitHub Archive Program的任务就是为子孙后代保留源代码，至少1000年！</p><p>只要你<strong>2月2日</strong>以前贡献过的开源代码，现在都已经被埋在北极的冰雪之下，<strong>保存一千年</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/aHR0cHM6Ly9tbWJpei5xc.jpg"></p><p>根据GitHub活动页面上的信息，这个活动将在2020年2月2日正式开始，目前网站上连倒计时牌都有了。</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/activity.jpg"></p><p>该项目是由GitHub与Long Now Foundation，全球互联网档案库，软件遗产基金会，北极世界档案馆，微软研究院，Bodleian图书馆和斯坦福大学图书馆等机构合作。</p><p>据GitHub官方统计，已经有数百万的程序为这个<strong>北极代码仓库</strong>（Arctic Code Vault）计划做出了贡献。</p><p>为了表彰这些程序员们，GitHub还设计了<strong>荣誉徽章</strong>。只要鼠标在开发者主页资料介绍部分悬停，就能看到有哪些项目被放到了北极。</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/URxB.png"></p><p><strong>为什么Github要使用多种形式的存储方式？</strong></p><p>Github表示：”尽管全球灾难发生的可能性很低，但是我们所有存储在现代媒体上的东西很可能在几代后就会丢失，跨多个组织和存储形式的归档软件将有助于确保其长期保存，在线归档员将其称为“ LOCKSS”，因为大量副本可以确保安全。”</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/SSD.jpg"></p><p>硬盘，SSD，CD可以使用几十年，备份磁带名义上只有 30 年的寿命，而且是要在严格控制的热度和湿度的条件下，尽管某些硬件的寿命可能会长一点，但是在未来未必还存在能够运行它们的现代计算机，所以，GitHub Archive Program就是为了解决数据流失的风险。</p><p><strong>灵活的代码保存方式</strong></p><p>在Long Now创始人Steward Brand的启发下，Github采用了”分层”策略来归档代码。通过提供从实时到长期存储的一系列解决方案，该方法旨在最大程度地提高灵活性和耐用性。存档程序分为三类：热门，一般和冷门。</p><ul><li>热门：接近实时更新</li><li>一般：每月或每年更新一次</li><li>冷门：每 5 年以上更新一次</li></ul><p><strong>一串代码的北极之旅</strong></p><p>本来GitHub在去年11月的Universe 2019大会上公布了这项激动人心的计划：将开源代码作为人类文明的火种留给后台，放在一个环境稳定、远离人类战火的地方。</p><p>具体的存放位置是在北极圈内一个岛上的地窖里，这个岛位于下面地图中最北边的红圈。</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/URxccB.png"></p><p>今年2月2日，GitHub对网站上<strong>所有开源项目</strong>进行了一次快照存档，然后计划让团队成员亲自护送这批代码到北极。</p><p>然而万万没想到，新冠疫情爆发了。GitHub团队只能与合作方，也就是胶片数据存储公司<strong>Piql</strong>保持远程联系。</p><p>他们先将<strong>21TB</strong>的代码数据交到这家公司位于挪威德拉门的工厂。代码被写在了<strong>186箱</strong>胶片里，胶片每帧都包含880万个像素点，源代码以<strong>QR码</strong>的形式存储其中。</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/zY0MA.jpg"></p><p>然后这186箱胶片被运到挪威首都奥斯陆，装上飞机运往距离欧洲大陆北部1000公里远的<strong>斯瓦尔巴群岛</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9ZaWNVaGs1YUFHdERraWF0bUZpYWNrbGduR2hjM1hwb2RrQ3VlUWlianhkd3RIeEMwWEFad2VpYVEyQ3ZMZXJsaFpRaWFFeHFnWHFnbFZERFNseWJOZXNwREJqZy82NDA.jpg"></p><p>代码最终降落在斯瓦尔巴群岛上一个只有几千人的小镇<strong>朗伊尔城</strong>。这里人迹罕至、气温寒冷，有几百米厚的冻土层，非常适宜存放胶片。</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/aHR0cHM6Ly.jpg"></p><p>当地的山上有个退役煤矿，相当于一座人类文明的“诺亚方舟”，许多国际组织在这里存放重要物品，还有一个保存全世界农作物种子的全球种子库，GitHub的代码就被安放在这里，预计可以保存1000年以上。</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/aH0c.jpg"></p><p><strong>GitHub Arctic Code Vault（北极）</strong></p><p>Github说的这个”北极代码库”位于挪威斯瓦尔巴群岛的一个废弃煤矿中，比北极圈更靠近北极，永久冻土层深达250米。斯瓦尔巴群岛受国际《斯瓦尔巴群岛条约》的管制，属于非军事区。它是世界上最北端的城镇的所在地，是地球上最偏远和地缘政治最稳定的人类居住地之一。</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/src=http___images5.aoyou.com_productlist_201803_4z62n807141810.jpg&refer=http___images5.aoyou.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/src=http___inews.gtimg.com_newsapp_match_0_9242289911_0.jpg&refer=http___inews.gtimg.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/src=http___5b0988e595225.cdn.sohucs.com_images_20171102_f67fb80987394aabbb7f4e4d9be19246.jpeg&refer=http___5b0988e595225.cdn.sohucs.jpg"></p><p>AWA 是挪威国有采矿公司 Store Norske Spitsbergen Kulkompani（SNSK）与长期数字存储提供商 Piql AS 的一项联合计划。 AWA 致力于永久保存档案，胶片卷轴将被存储在位于斯瓦尔巴群岛偏远群岛一座废弃煤矿密封室内的钢壁容器中。</p><p>尽管斯瓦尔巴群岛受到气候变化的影响，但在可预见的将来，可能只会影响到最外面几米的永久冻土，预计变暖不会威胁稳定性。这让斯瓦尔巴群岛成为人类共同知识遗产的稳定、长期的档案库的绝佳位置。</p><p><strong>未来将用玻璃存代码</strong></p><p>用胶片存代码不是GitHub的唯一手段。被微软收购后，GitHub将有幸尝试微软的最新“黑科技”。</p><p>去年微软对外公布了一个<strong>Project Silica</strong>项目，就是<strong>用激光刻蚀石英玻璃</strong>来存储数据。石英玻璃是一种耐用的存储介质，抗电磁干扰、抗水、抗热，可提供保存数据长达几万年之久。</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/WMwM1J.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/Screen-Shot.png"></p><p>GitHub说，石英玻璃是永远为后代保留世界开源软件的理想存储介质，所以将这项黑科技作为新的代码保存手段。</p><p>现在，GitHub已经在玻璃中存档了6000个世界上最受欢迎的开源存储库。等到该技术成熟且成本下降后，应该会有更多的代码被写到玻璃中。</p><p>网友们看到这个消息后，都乐了，纷纷表示自己的bug再也洗不白了！</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/bGgza1.png"></p><blockquote><p>- EOF -</p><p><a class="link"   href="https://github.blog/2020-07-16-github-archive-program-the-journey-of-the-worlds-open-source-code-to-the-arctic/" >官方博客<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;你的代码要被存在北极1000年！GitHub启动代码永久存储计划！&quot;&gt;&lt;a href=&quot;#你的代码要被存在北极1000年！GitHub启动代码永久存储计划！&quot; class=&quot;headerlink&quot; title=&quot;你的代码要被存在北极1000年！GitHub启动代码</summary>
      
    
    
    
    <category term="News" scheme="https://blog.icscraft.top/categories/News/"/>
    
    
    <category term="Github" scheme="https://blog.icscraft.top/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>感悟人生-随笔</title>
    <link href="https://blog.icscraft.top/article/a46b77f.html"/>
    <id>https://blog.icscraft.top/article/a46b77f.html</id>
    <published>2021-05-23T08:48:28.000Z</published>
    <updated>2021-05-23T09:04:26.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感悟人生-随笔"><a href="#感悟人生-随笔" class="headerlink" title="感悟人生-随笔"></a>感悟人生-随笔</h1><blockquote><p>&ensp;&ensp;人生，由我不由天，幸福，由心不由境。不管遇到什么，都是一个风景，都是一个刻苦铭心，即使是最平淡的过往。无论灿烂与否，都是一个完整的人生，若有缺憾，只能说是不懂罢了。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;——题记</p></blockquote><p>​    </p><p>&ensp;&ensp;&ensp;&ensp;这三年，是人生长河里短短的一瞬间，但却是我记忆力绵长的一生。<br>&ensp;&ensp;&ensp;&ensp;光阴似箭，岁月如梭。三年的时光即将结束。在这三年里，我感悟到了很多人生道理，做人原则。</p><p>总结如下：<br>&ensp;&ensp;&ensp;&ensp;一、<br>&ensp;&ensp;&ensp;&ensp;人的一生，没有谁事事得意，处处风光。告诉自己淡然一些，看开一点，生活的过程中保持一种平常的心态，你会愉快。没人知道，痛苦会在哪个时段出现；也没人清楚，烦恼会在哪个时段出现。我们能做的，就是做好自己。珍惜拥有，不管今后遭遇多大困难，不论以后碰到多少不快，我们都应该真诚相处，坦诚相待。<br>&ensp;&ensp;&ensp;&ensp;二、<br>&ensp;&ensp;&ensp;&ensp;何为朋友？当别人相信你脸上的微笑时，他能读懂你眼中的哀伤；他隐匿在你觥筹交错之后，现身于你的困顿烦忧之中；当你得志时，他站在远处，静观你的人来客往，当你失意时，他无声的走近，送上一缕至诚的阳光；和他可以长别、可以久无音讯，也可以相视无言，不必时时都想起，想起皆在温暖处。<br>&ensp;&ensp;&ensp;&ensp;三、<br>&ensp;&ensp;&ensp;&ensp;有时，珍惜，是为了更好的拥有；而放下，则是为了更好的前行。好与不好都走了，幸与不幸都过了。人生的际遇，就像那窗外的雨，淋过，湿过；散了，远了。容不得我们许与不许，便已然不再。于是，人生，便总是从告别中走向明天，将美好留在心底，淡然就好；将悲伤至于脑后，遗忘了最好。<br>&ensp;&ensp;&ensp;&ensp;四、<br>&ensp;&ensp;&ensp;&ensp;前行总会有坎坷，飞翔，会有阻隔，心随路转，心路常宽，学会转弯才算明智。无论什么事，无谓的坚持不一定成功。改变一下思路，往往会柳暗花明，豁然开朗。生活，无论多么不开心，也要继续；人生，无论多么不如意，也不能停步。顺其自然，随心而为，做真实的自己。让生命少些遗憾，让人生多些无悔。<br>&ensp;&ensp;&ensp;&ensp;五、<br>&ensp;&ensp;&ensp;&ensp;人生，很难称心；生活，很难如意。朋友不必高低，要相互真诚；穿着不比贵贱，要合身得体；房子不比大小，要舒适温暖；车子不比名气，要一路平安；长相不比美丑，要心态平衡；身体不比胖瘦，要健康无病；财富不比有无，要节俭会理；生活不比奢侈，要知足常乐。<br>&ensp;&ensp;&ensp;&ensp;六、<br>&ensp;&ensp;&ensp;&ensp;不要为了生活琐事影响了情绪，让心情永远是人生追寻的主旋律；不要用自己的标准要求别人，授受别人的强大，接受别人的缺点与性格缺陷，允许他人没素质，人无完人；尽量别纠结了自己，又打扰了别人；对生活再不满意，时间也不会过的再慢些，所以长点心吧：该吃吃该喝喝，凡是别往心里搁。<br>&ensp;&ensp;&ensp;&ensp;七、<br>&ensp;&ensp;&ensp;&ensp;每个人，做自己喜欢的事儿，因为喜欢，再苦再累也不觉得，所以人尽其乐很重要；温和与粗暴，主动做事与被动做事儿，前者会积极，后者会消极，效率肯定不同。所以思想工作很重要，熟悉的环境与陌生的环境，同样的事情，前者轻车熟路，轻松搞定，而后者会茫然失措，艰难无比，所以适应环境很重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;感悟人生-随笔&quot;&gt;&lt;a href=&quot;#感悟人生-随笔&quot; class=&quot;headerlink&quot; title=&quot;感悟人生-随笔&quot;&gt;&lt;/a&gt;感悟人生-随笔&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;ensp;&amp;ensp;人生，由我不由天，幸福，由心不由境。不管遇到什么，</summary>
      
    
    
    
    <category term="Daily" scheme="https://blog.icscraft.top/categories/Daily/"/>
    
    
    <category term="Life" scheme="https://blog.icscraft.top/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>钢铁是怎样炼成的 - 职务分配</title>
    <link href="https://blog.icscraft.top/article/5c2de6.html"/>
    <id>https://blog.icscraft.top/article/5c2de6.html</id>
    <published>2021-05-12T12:52:14.000Z</published>
    <updated>2021-05-24T15:57:41.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="钢铁是怎样炼成的-职务分配"><a href="#钢铁是怎样炼成的-职务分配" class="headerlink" title="钢铁是怎样炼成的 - 职务分配"></a>钢铁是怎样炼成的 - 职务分配</h1><blockquote><p><del>组长：张乐天</del></p><p><del>文案：袁朝</del></p><p><del><strong>全部</strong>制作…：缪佳琦</del></p><p><del>演讲：丁炎、于佳越、龚子豪</del></p></blockquote><p>Okey…</p><h2 id="Update"><a href="#Update" class="headerlink" title="Update:"></a>Update:</h2><blockquote><p>组长：缪佳琦</p><p>文案：缪佳琦</p><p>制作：缪佳琦</p><p>演讲：缪佳琦</p></blockquote><p><strong>🐱‍👤终究是一人扛下了所有🦜</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/steel.jpg" alt="Steel"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;钢铁是怎样炼成的-职务分配&quot;&gt;&lt;a href=&quot;#钢铁是怎样炼成的-职务分配&quot; class=&quot;headerlink&quot; title=&quot;钢铁是怎样炼成的 - 职务分配&quot;&gt;&lt;/a&gt;钢铁是怎样炼成的 - 职务分配&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;组长：张</summary>
      
    
    
    
    <category term="School" scheme="https://blog.icscraft.top/categories/School/"/>
    
    
    <category term="School" scheme="https://blog.icscraft.top/tags/School/"/>
    
  </entry>
  
  <entry>
    <title>米瑞科技&amp;IZUAL-Logo正式完成!</title>
    <link href="https://blog.icscraft.top/article/f9eff0c7.html"/>
    <id>https://blog.icscraft.top/article/f9eff0c7.html</id>
    <published>2021-05-10T12:33:46.000Z</published>
    <updated>2021-05-18T14:07:40.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="米瑞科技-amp-IZUAL-Logo正式完成"><a href="#米瑞科技-amp-IZUAL-Logo正式完成" class="headerlink" title="米瑞科技&amp;IZUAL-Logo正式完成!"></a>米瑞科技&amp;IZUAL-Logo正式完成!</h1><p>历经三个星期时间，米瑞科技&amp;IZUAL的Logo完成咯~</p><p>下面放图：</p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/%E7%B1%B3%E7%91%9E%E7%A7%91%E6%8A%80.png" alt="米瑞科技 - Logo"></p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/%5B3D%5DIZUAL.png" alt="IZUAL - Logo[3D]"></p><p><img src="https://cdn.jsdelivr.net/gh/ICSDEVE/FigureBed/data/%5B%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%5DIZUAL.png" alt="IZUAL - Logo[莫比乌斯]"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;米瑞科技-amp-IZUAL-Logo正式完成&quot;&gt;&lt;a href=&quot;#米瑞科技-amp-IZUAL-Logo正式完成&quot; class=&quot;headerlink&quot; title=&quot;米瑞科技&amp;amp;IZUAL-Logo正式完成!&quot;&gt;&lt;/a&gt;米瑞科技&amp;amp;IZUAL-L</summary>
      
    
    
    
    <category term="Company" scheme="https://blog.icscraft.top/categories/Company/"/>
    
    
    <category term="Miracle" scheme="https://blog.icscraft.top/tags/Miracle/"/>
    
  </entry>
  
  <entry>
    <title>Dart数据类型详解[int double String bool List Maps]</title>
    <link href="https://blog.icscraft.top/article/ad9f66d5.html"/>
    <id>https://blog.icscraft.top/article/ad9f66d5.html</id>
    <published>2021-04-30T23:31:43.000Z</published>
    <updated>2021-05-15T17:42:46.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h1><h1 id="Dart-数据类型"><a href="#Dart-数据类型" class="headerlink" title="Dart 数据类型"></a>Dart 数据类型</h1><h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><table><thead><tr><th>编号</th><th>数据类型</th><th>包含</th></tr></thead><tbody><tr><td>1</td><td>Numbers(数值)</td><td>int、double</td></tr><tr><td>2</td><td>Strings(字符串)</td><td>String</td></tr><tr><td>3</td><td>Booleans(布尔)</td><td>bool</td></tr><tr><td>4</td><td>List(数组)</td><td>在Dart中，数组是列表对象，故称之为列表</td></tr><tr><td>5</td><td>Maps(字典)</td><td>Map是一个键值对相关的对象。键和值可以是仍和对象。每个键只出</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line"><span class="comment">//1.字符串几种定义方式</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;this is str&#x27;</span>;</span><br><span class="line">    <span class="built_in">print</span>(str);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指定变量类型</span></span><br><span class="line">    <span class="built_in">String</span> str1 = <span class="string">&#x27;this is str&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(str1)</span><br><span class="line">    <span class="built_in">String</span> str2 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    this is str</span></span><br><span class="line"><span class="string">    this is str1</span></span><br><span class="line"><span class="string">    this is str2</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.字符串的拼接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;待更新&quot;&gt;&lt;a href=&quot;#待更新&quot; class=&quot;headerlink&quot; title=&quot;待更新&quot;&gt;&lt;/a&gt;待更新&lt;/h1&gt;&lt;h1 id=&quot;Dart-数据类型&quot;&gt;&lt;a href=&quot;#Dart-数据类型&quot; class=&quot;headerlink&quot; title=&quot;Dar</summary>
      
    
    
    
    <category term="Dart" scheme="https://blog.icscraft.top/categories/Dart/"/>
    
    
    <category term="Learn" scheme="https://blog.icscraft.top/tags/Learn/"/>
    
  </entry>
  
  <entry>
    <title>Dart入口方法 Print函数 注释 变量 常量和命名规则</title>
    <link href="https://blog.icscraft.top/article/29bf6046.html"/>
    <id>https://blog.icscraft.top/article/29bf6046.html</id>
    <published>2021-04-26T13:38:01.000Z</published>
    <updated>2021-05-15T17:42:46.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dart-入口方法"><a href="#Dart-入口方法" class="headerlink" title="Dart 入口方法"></a>Dart 入口方法</h1><h2 id="什么是入口方法？"><a href="#什么是入口方法？" class="headerlink" title="什么是入口方法？"></a>什么是入口方法？</h2><p>在Dart中所有需要被执行的代码都得放在入口方法<code>main</code>里面。</p><h3 id="入口方法-main-的使用"><a href="#入口方法-main-的使用" class="headerlink" title="入口方法 main 的使用"></a>入口方法 main 的使用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个简单的`main`</span></span><br><span class="line">main() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Print-函数的使用"><a href="#Print-函数的使用" class="headerlink" title="Print 函数的使用"></a>Print 函数的使用</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; Hellow World!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    Print(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `void` 表示`mian`方法没有返回值</span></span><br></pre></td></tr></table></figure><h2 id="注释的使用"><a href="#注释的使用" class="headerlink" title="注释的使用"></a>注释的使用</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="markdown">这是文档注释(推荐)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="markdown"><span class="comment"> **</span> 这也是文档注释</span></span></span><br><span class="line"><span class="markdown"><span class="comment"> <span class="strong">** 此方法可以多行</span></span></span></span><br><span class="line"><span class="strong"><span class="markdown"><span class="comment"> **</span>/</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这里面可以写多行内容</span></span><br><span class="line"><span class="comment"> * 多行..</span></span><br><span class="line"><span class="comment"> * 多行...</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><p>Dart 是一个强大的脚本类型语言，可以不预先定义变量类型，会自动进行类型推导。</p><p>Dart 中定义变量可以通过<code>var</code>关键字或类型关键词如<code>String</code>，来申明变量。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> mian() &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;Hellow World!&#x27;</span>;</span><br><span class="line">    <span class="built_in">print</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个简单的字符串类型变量使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; Hellow World!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> mian() &#123;</span><br><span class="line">    <span class="keyword">var</span> myNum = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">print</span>(myNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个简单的数字类型变量使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; 123</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> mian() &#123;</span><br><span class="line">    <span class="built_in">String</span> str = <span class="string">&#x27;Hellow World!&#x27;</span>;</span><br><span class="line">    <span class="built_in">print</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定变量类型为String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; Hellow World!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> mian() &#123;</span><br><span class="line">    <span class="built_in">int</span> myNum = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">print</span>(myNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定变量类型为int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; 123</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="常量的使用"><a href="#常量的使用" class="headerlink" title="常量的使用"></a>常量的使用</h2><p><code>final</code> 和 <code>const</code> 修饰符</p><p><code>const</code>值不变 一开始就得赋值</p><p><code>final</code>开始可以不赋值 只能赋一次；而<code>final</code>不仅有<code>const</code>的编译时常量的特性，最重要的它是运行时常量，并且<code>final</code>是惰性初始化，及在运行时第一次使用前才初始化。请使用<code>final</code>或<code>const</code>修饰它，而不是使用<code>var</code>或其他变量类型。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;This is a str&#x27;</span>;</span><br><span class="line">    str = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line">    <span class="built_in">print</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单的字符串类型变量(可改变)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; Hellow World!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> myNum = <span class="number">123</span>;</span><br><span class="line">    myNum = <span class="number">321</span>;</span><br><span class="line">    <span class="built_in">print</span>(myNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单的数字类型变量(可改变)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; 321</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="built_in">print</span>(PI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const 常量(不可改变)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; 3.14159</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">final</span> PI = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="built_in">print</span>(PI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// final 常量(不可改变)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; 3.14159</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">final</span> time = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line">    <span class="built_in">print</span>(time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="错误使用"><a href="#错误使用" class="headerlink" title="错误使用"></a>错误使用</h3><hr><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.14159</span>;</span><br><span class="line">    PI = <span class="number">123.1234</span>; <span class="comment">// 错误写法，常量不可修改</span></span><br><span class="line">    <span class="built_in">print</span>(PI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：const 常量(不可改变) 请不要试图修改常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行将会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">final</span> PI = <span class="number">3.14159</span>;</span><br><span class="line">    PI = <span class="number">123.1234</span>; <span class="comment">// 错误写法，常量不可修改</span></span><br><span class="line">    <span class="built_in">print</span>(PI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：final 常量(不可改变) 请不要试图修改常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行将会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">const</span> time = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line">    <span class="comment">// 错误使用，请看`final`和`const`的区别</span></span><br><span class="line">    <span class="built_in">print</span>(time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行将会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p><code>final</code>和<code>const</code>的区别：<code>final</code>开始可以不赋值 只能赋一次；而<code>final</code>不仅有<code>const</code>的编译时常量的特性，最重要的它是运行时常量，并且<code>final</code>是惰性初始化，及在运行时第一次使用前才初始化。</p><p><strong>注：当需要调用方法赋给常量时请务必使用<code>final</code></strong></p></blockquote><h2 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h2><ol><li>变量名称必须由数字、字母、下划线和美元符($)组成</li><li>注意：标识符开头不能是数字</li><li>标识符不能是保留字和关键字</li><li>变量的名称是区分大小写的，如：age和Age是不同的变量</li><li>标识符(变量名称)一定要见名思意：变量名建议使用名词，方法名称建议使用动词，养成良好命名习惯并在代码中加入一些空格将让你的代码看着很养眼</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dart-入口方法&quot;&gt;&lt;a href=&quot;#Dart-入口方法&quot; class=&quot;headerlink&quot; title=&quot;Dart 入口方法&quot;&gt;&lt;/a&gt;Dart 入口方法&lt;/h1&gt;&lt;h2 id=&quot;什么是入口方法？&quot;&gt;&lt;a href=&quot;#什么是入口方法？&quot; class=&quot;</summary>
      
    
    
    
    <category term="Dart" scheme="https://blog.icscraft.top/categories/Dart/"/>
    
    
    <category term="Learn" scheme="https://blog.icscraft.top/tags/Learn/"/>
    
  </entry>
  
  <entry>
    <title>Dart介绍 环境搭建 开发工具配置</title>
    <link href="https://blog.icscraft.top/article/18850323.html"/>
    <id>https://blog.icscraft.top/article/18850323.html</id>
    <published>2021-04-26T13:34:05.000Z</published>
    <updated>2021-05-15T17:42:46.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dart-介绍"><a href="#Dart-介绍" class="headerlink" title="Dart 介绍"></a>Dart 介绍</h1><hr><p>​    <a class="link"   href="https://dart.dev/" >Dart<i class="fas fa-external-link-alt"></i></a>是由谷歌开发的计算机编程语言, 它可以用于web、服务器、移动应用和物联网等领域的开发。</p><p>​    <a class="link"   href="https://dart.dev/" >Dart<i class="fas fa-external-link-alt"></i></a>诞生于2011年，号称要取代<a class="link"   href="https://www.javascript.com/" >JavaScript<i class="fas fa-external-link-alt"></i></a>。但是过去几年一直不温不火，直到<a class="link"   href="https://flutter.dev/" >Flutter<i class="fas fa-external-link-alt"></i></a>的出现现在被人们重新重视要学<a class="link"   href="https://flutter.dev/" >Flutter<i class="fas fa-external-link-alt"></i></a>的话我们首先得会<a class="link"   href="https://dart.dev/" >Dart<i class="fas fa-external-link-alt"></i></a>。</p><blockquote><p><a class="link"   href="https://dart.dev/" >Dart官网<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="Dart-环境搭建"><a href="#Dart-环境搭建" class="headerlink" title="Dart 环境搭建"></a>Dart 环境搭建</h2><hr><p>要在本地开发<a class="link"   href="https://dart.dev/" >Dart<i class="fas fa-external-link-alt"></i></a>的话首先需要安装<a class="link"   href="https://dart.dev/" >Dart SDK<i class="fas fa-external-link-alt"></i></a></p><blockquote><p><a class="link"   href="https://dart.dev/get-dart" >官方文档<i class="fas fa-external-link-alt"></i></a></p></blockquote><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p>Dart SDK支持在Windows, Linux 和 macOS上使用。</p><table><thead><tr><th></th><th>Windows</th><th>macOS</th><th>Linux</th></tr></thead><tbody><tr><td>支持  版本</td><td>Windows 10</td><td>最新的三个主要版本</td><td>最近的Linux版本，但只测试了Ubuntu 16.04</td></tr><tr><td>支持  架构</td><td>x64，ia32</td><td>x64, 对arm64的支持正在进行中</td><td>x64, ia32, arm, arm64</td></tr></tbody></table><hr><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p><a class="link"   href="https://gekorm.com/dart-windows/" >Windows(推荐)<i class="fas fa-external-link-alt"></i></a></p><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><p>如果Mac没有安装<a class="link"   href="https://brew.sh/" >brew<i class="fas fa-external-link-alt"></i></a>工具首先得安装它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap dart-lang/dart</span><br><span class="line">brew install dart</span><br></pre></td></tr></table></figure><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>如果你在AMD64(64-bit Intel)上使用Debian/Ubuntu，你可以选择以下选项之一，这两种选项都可以在新版本发布时自动更新SDK。</p><ul><li>Install using apt-get</li><li>Install a Debian package</li></ul><p>使用 apt-get 安装</p><p>执行以下代码<strong>一次性设置</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install apt-transport-https</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sh -c <span class="string">&#x27;wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -&#x27;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sh -c <span class="string">&#x27;wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list &gt; /etc/apt/sources.list.d/dart_stable.list&#x27;</span></span></span><br></pre></td></tr></table></figure><p>然后安装Dart SDK:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install dart</span></span><br></pre></td></tr></table></figure><p>安装Debian软件包</p><p>或者，下载<a class="link"   href="https://storage.googleapis.com/dart-archive/channels/stable/release/latest/linux_packages/dart_2.12.4-1_amd64.deb" >Dart SDK的Debian软件包<i class="fas fa-external-link-alt"></i></a>格式为.<code>.deb</code></p><p>修改PATH以访问所有Dart二进制文件</p><p>安装SDK后，将其<code>bin</code>目录添加到您的<code>PATH</code>中。例如，在活动终端会话中使用以下命令更改：<code>PATH</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/usr/lib/dart/bin&quot;</span></span></span><br></pre></td></tr></table></figure><p>要更改未来终端会话的<code>PATH</code>，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:/usr/lib/dart/bin&quot;&#x27;</span> &gt;&gt; ~/.profile</span></span><br></pre></td></tr></table></figure><h2 id="Dart-开发工具"><a href="#Dart-开发工具" class="headerlink" title="Dart 开发工具"></a>Dart 开发工具</h2><hr><p>Dart的开发工具有很多，如：VScode、Android Studio、IntelliJ IDEA、WebStorm等</p><p>本人主要使用<a class="link"   href="https://code.visualstudio.com/" >VScode<i class="fas fa-external-link-alt"></i></a>，因此只写VScode中配置Dart过程。</p><p>VScode具体安装过程自行百度解决。</p><h4 id="VScode搭建Dart环境"><a href="#VScode搭建Dart环境" class="headerlink" title="VScode搭建Dart环境"></a>VScode搭建Dart环境</h4><ol><li>找到VScode插件安装项搜索并安装Dart</li><li>找到VScode插件安装Code Runner(用来运行Dart程序)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dart-介绍&quot;&gt;&lt;a href=&quot;#Dart-介绍&quot; class=&quot;headerlink&quot; title=&quot;Dart 介绍&quot;&gt;&lt;/a&gt;Dart 介绍&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;​    &lt;a class=&quot;link&quot;   href=&quot;https://dart.dev</summary>
      
    
    
    
    <category term="Dart" scheme="https://blog.icscraft.top/categories/Dart/"/>
    
    
    <category term="Learn" scheme="https://blog.icscraft.top/tags/Learn/"/>
    
  </entry>
  
</feed>
