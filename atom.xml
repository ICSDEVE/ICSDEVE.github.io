<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miracle_Ink&#39;s Blog</title>
  
  
  <link href="https://blog.icscraft.top/atom.xml" rel="self"/>
  
  <link href="https://blog.icscraft.top/"/>
  <updated>2021-05-13T15:52:05.604Z</updated>
  <id>https://blog.icscraft.top/</id>
  
  <author>
    <name>Miracle_Ink</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>钢铁是怎样炼成的 - 职务分配</title>
    <link href="https://blog.icscraft.top/2021/05/12/%E9%92%A2%E9%93%81%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84%20-%20%E8%81%8C%E5%8A%A1%E5%88%86%E9%85%8D/"/>
    <id>https://blog.icscraft.top/2021/05/12/%E9%92%A2%E9%93%81%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84%20-%20%E8%81%8C%E5%8A%A1%E5%88%86%E9%85%8D/</id>
    <published>2021-05-12T12:52:14.000Z</published>
    <updated>2021-05-13T15:52:05.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="钢铁是怎样炼成的-职务分配"><a href="#钢铁是怎样炼成的-职务分配" class="headerlink" title="钢铁是怎样炼成的 - 职务分配"></a>钢铁是怎样炼成的 - 职务分配</h1><blockquote><p>组长：张乐天</p><p>文案：袁朝</p><p><strong>全部</strong>制作…：缪佳琦</p><p>演讲：丁炎、于佳越、龚子豪</p></blockquote><p><img src="https://blog.icscraft.top/images/steel.jpg" alt="TOC"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;钢铁是怎样炼成的-职务分配&quot;&gt;&lt;a href=&quot;#钢铁是怎样炼成的-职务分配&quot; class=&quot;headerlink&quot; title=&quot;钢铁是怎样炼成的 - 职务分配&quot;&gt;&lt;/a&gt;钢铁是怎样炼成的 - 职务分配&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;组长：张乐天&lt;/p</summary>
      
    
    
    
    <category term="School" scheme="https://blog.icscraft.top/categories/School/"/>
    
    
    <category term="School" scheme="https://blog.icscraft.top/tags/School/"/>
    
  </entry>
  
  <entry>
    <title>米瑞科技&amp;IZUAL-Logo正式完成!</title>
    <link href="https://blog.icscraft.top/2021/05/10/%E7%B1%B3%E7%91%9E%E7%A7%91%E6%8A%80-IZUAL-Logo%E6%AD%A3%E5%BC%8F%E5%AE%8C%E6%88%90/"/>
    <id>https://blog.icscraft.top/2021/05/10/%E7%B1%B3%E7%91%9E%E7%A7%91%E6%8A%80-IZUAL-Logo%E6%AD%A3%E5%BC%8F%E5%AE%8C%E6%88%90/</id>
    <published>2021-05-10T12:33:46.000Z</published>
    <updated>2021-05-13T15:52:03.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="米瑞科技-amp-IZUAL-Logo正式完成"><a href="#米瑞科技-amp-IZUAL-Logo正式完成" class="headerlink" title="米瑞科技&amp;IZUAL-Logo正式完成!"></a>米瑞科技&amp;IZUAL-Logo正式完成!</h1><p>历经三个星期时间，米瑞科技&amp;IZUAL的Logo完成咯~</p><p>下面放图：</p><p><img src="https://blog.icscraft.top/images/%E7%B1%B3%E7%91%9E%E7%A7%91%E6%8A%80.png" alt="米瑞科技 - Logo"></p><p><img src="https://blog.icscraft.top/images/%5B3D%5DIZUAL.png" alt="IZUAL - Logo[3D]"></p><p><img src="https://blog.icscraft.top/images/%5B%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%5DIZUAL.png" alt="IZUAL - Logo[莫比乌斯]"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;米瑞科技-amp-IZUAL-Logo正式完成&quot;&gt;&lt;a href=&quot;#米瑞科技-amp-IZUAL-Logo正式完成&quot; class=&quot;headerlink&quot; title=&quot;米瑞科技&amp;amp;IZUAL-Logo正式完成!&quot;&gt;&lt;/a&gt;米瑞科技&amp;amp;IZUAL-L</summary>
      
    
    
    
    <category term="Company" scheme="https://blog.icscraft.top/categories/Company/"/>
    
    
    <category term="Miracle" scheme="https://blog.icscraft.top/tags/Miracle/"/>
    
  </entry>
  
  <entry>
    <title>Dart数据类型详解[int double String bool List Maps]</title>
    <link href="https://blog.icscraft.top/2021/05/01/Dart%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3[int%20double%20String%20bool%20List%20Maps]/"/>
    <id>https://blog.icscraft.top/2021/05/01/Dart%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3[int%20double%20String%20bool%20List%20Maps]/</id>
    <published>2021-04-30T23:31:43.000Z</published>
    <updated>2021-05-13T13:46:41.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h1><h1 id="Dart-数据类型"><a href="#Dart-数据类型" class="headerlink" title="Dart 数据类型"></a>Dart 数据类型</h1><h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><table><thead><tr><th>编号</th><th>数据类型</th><th>包含</th></tr></thead><tbody><tr><td>1</td><td>Numbers(数值)</td><td>int、double</td></tr><tr><td>2</td><td>Strings(字符串)</td><td>String</td></tr><tr><td>3</td><td>Booleans(布尔)</td><td>bool</td></tr><tr><td>4</td><td>List(数组)</td><td>在Dart中，数组是列表对象，故称之为列表</td></tr><tr><td>5</td><td>Maps(字典)</td><td>Map是一个键值对相关的对象。键和值可以是仍和对象。每个键只出</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line"><span class="comment">//1.字符串几种定义方式</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;this is str&#x27;</span>;</span><br><span class="line">    <span class="built_in">print</span>(str);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指定变量类型</span></span><br><span class="line">    <span class="built_in">String</span> str1 = <span class="string">&#x27;this is str&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(str1)</span><br><span class="line">    <span class="built_in">String</span> str2 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    this is str</span></span><br><span class="line"><span class="string">    this is str1</span></span><br><span class="line"><span class="string">    this is str2</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.字符串的拼接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;待更新&quot;&gt;&lt;a href=&quot;#待更新&quot; class=&quot;headerlink&quot; title=&quot;待更新&quot;&gt;&lt;/a&gt;待更新&lt;/h1&gt;&lt;h1 id=&quot;Dart-数据类型&quot;&gt;&lt;a href=&quot;#Dart-数据类型&quot; class=&quot;headerlink&quot; title=&quot;Dar</summary>
      
    
    
    
    <category term="Dart" scheme="https://blog.icscraft.top/categories/Dart/"/>
    
    
    <category term="Learn" scheme="https://blog.icscraft.top/tags/Learn/"/>
    
  </entry>
  
  <entry>
    <title>Dart入口方法 Print函数 注释 变量 常量和命名规则</title>
    <link href="https://blog.icscraft.top/2021/04/26/Dart%E5%85%A5%E5%8F%A3%E6%96%B9%E6%B3%95-Print%E5%87%BD%E6%95%B0-%E6%B3%A8%E9%87%8A-%E5%8F%98%E9%87%8F-%E5%B8%B8%E9%87%8F%E5%92%8C%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/"/>
    <id>https://blog.icscraft.top/2021/04/26/Dart%E5%85%A5%E5%8F%A3%E6%96%B9%E6%B3%95-Print%E5%87%BD%E6%95%B0-%E6%B3%A8%E9%87%8A-%E5%8F%98%E9%87%8F-%E5%B8%B8%E9%87%8F%E5%92%8C%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</id>
    <published>2021-04-26T13:38:01.000Z</published>
    <updated>2021-05-13T13:46:40.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dart-入口方法"><a href="#Dart-入口方法" class="headerlink" title="Dart 入口方法"></a>Dart 入口方法</h1><h2 id="什么是入口方法？"><a href="#什么是入口方法？" class="headerlink" title="什么是入口方法？"></a>什么是入口方法？</h2><p>在Dart中所有需要被执行的代码都得放在入口方法<code>main</code>里面。</p><h3 id="入口方法-main-的使用"><a href="#入口方法-main-的使用" class="headerlink" title="入口方法 main 的使用"></a>入口方法 main 的使用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个简单的`main`</span></span><br><span class="line">main() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Print-函数的使用"><a href="#Print-函数的使用" class="headerlink" title="Print 函数的使用"></a>Print 函数的使用</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; Hellow World!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    Print(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `void` 表示`mian`方法没有返回值</span></span><br></pre></td></tr></table></figure><h2 id="注释的使用"><a href="#注释的使用" class="headerlink" title="注释的使用"></a>注释的使用</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="markdown">这是文档注释(推荐)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="markdown"><span class="comment"> **</span> 这也是文档注释</span></span></span><br><span class="line"><span class="markdown"><span class="comment"> <span class="strong">** 此方法可以多行</span></span></span></span><br><span class="line"><span class="strong"><span class="markdown"><span class="comment"> **</span>/</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这里面可以写多行内容</span></span><br><span class="line"><span class="comment"> * 多行..</span></span><br><span class="line"><span class="comment"> * 多行...</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><p>Dart 是一个强大的脚本类型语言，可以不预先定义变量类型，会自动进行类型推导。</p><p>Dart 中定义变量可以通过<code>var</code>关键字或类型关键词如<code>String</code>，来申明变量。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> mian() &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;Hellow World!&#x27;</span>;</span><br><span class="line">    <span class="built_in">print</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个简单的字符串类型变量使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; Hellow World!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> mian() &#123;</span><br><span class="line">    <span class="keyword">var</span> myNum = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">print</span>(myNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个简单的数字类型变量使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; 123</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> mian() &#123;</span><br><span class="line">    <span class="built_in">String</span> str = <span class="string">&#x27;Hellow World!&#x27;</span>;</span><br><span class="line">    <span class="built_in">print</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定变量类型为String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; Hellow World!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> mian() &#123;</span><br><span class="line">    <span class="built_in">int</span> myNum = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">print</span>(myNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定变量类型为int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; 123</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="常量的使用"><a href="#常量的使用" class="headerlink" title="常量的使用"></a>常量的使用</h2><p><code>final</code> 和 <code>const</code> 修饰符</p><p><code>const</code>值不变 一开始就得赋值</p><p><code>final</code>开始可以不赋值 只能赋一次；而<code>final</code>不仅有<code>const</code>的编译时常量的特性，最重要的它是运行时常量，并且<code>final</code>是惰性初始化，及在运行时第一次使用前才初始化。请使用<code>final</code>或<code>const</code>修饰它，而不是使用<code>var</code>或其他变量类型。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;This is a str&#x27;</span>;</span><br><span class="line">    str = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line">    <span class="built_in">print</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单的字符串类型变量(可改变)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; Hellow World!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> myNum = <span class="number">123</span>;</span><br><span class="line">    myNum = <span class="number">321</span>;</span><br><span class="line">    <span class="built_in">print</span>(myNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单的数字类型变量(可改变)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; 321</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="built_in">print</span>(PI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const 常量(不可改变)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; 3.14159</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">final</span> PI = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="built_in">print</span>(PI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// final 常量(不可改变)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; 3.14159</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">final</span> time = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line">    <span class="built_in">print</span>(time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行输出:</span></span><br><span class="line"><span class="comment"> * &gt;&gt; yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="错误使用"><a href="#错误使用" class="headerlink" title="错误使用"></a>错误使用</h3><hr><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.14159</span>;</span><br><span class="line">    PI = <span class="number">123.1234</span>; <span class="comment">// 错误写法，常量不可修改</span></span><br><span class="line">    <span class="built_in">print</span>(PI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：const 常量(不可改变) 请不要试图修改常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行将会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">final</span> PI = <span class="number">3.14159</span>;</span><br><span class="line">    PI = <span class="number">123.1234</span>; <span class="comment">// 错误写法，常量不可修改</span></span><br><span class="line">    <span class="built_in">print</span>(PI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：final 常量(不可改变) 请不要试图修改常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行将会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">const</span> time = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line">    <span class="comment">// 错误使用，请看`final`和`const`的区别</span></span><br><span class="line">    <span class="built_in">print</span>(time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 执行将会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p><code>final</code>和<code>const</code>的区别：<code>final</code>开始可以不赋值 只能赋一次；而<code>final</code>不仅有<code>const</code>的编译时常量的特性，最重要的它是运行时常量，并且<code>final</code>是惰性初始化，及在运行时第一次使用前才初始化。</p><p><strong>注：当需要调用方法赋给常量时请务必使用<code>final</code></strong></p></blockquote><h2 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h2><ol><li>变量名称必须由数字、字母、下划线和美元符($)组成</li><li>注意：标识符开头不能是数字</li><li>标识符不能是保留字和关键字</li><li>变量的名称是区分大小写的，如：age和Age是不同的变量</li><li>标识符(变量名称)一定要见名思意：变量名建议使用名词，方法名称建议使用动词，养成良好命名习惯并在代码中加入一些空格将让你的代码看着很养眼</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dart-入口方法&quot;&gt;&lt;a href=&quot;#Dart-入口方法&quot; class=&quot;headerlink&quot; title=&quot;Dart 入口方法&quot;&gt;&lt;/a&gt;Dart 入口方法&lt;/h1&gt;&lt;h2 id=&quot;什么是入口方法？&quot;&gt;&lt;a href=&quot;#什么是入口方法？&quot; class=&quot;</summary>
      
    
    
    
    <category term="Dart" scheme="https://blog.icscraft.top/categories/Dart/"/>
    
    
    <category term="Learn" scheme="https://blog.icscraft.top/tags/Learn/"/>
    
  </entry>
  
  <entry>
    <title>Dart介绍 环境搭建 开发工具配置</title>
    <link href="https://blog.icscraft.top/2021/04/26/Dart%E4%BB%8B%E7%BB%8D-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.icscraft.top/2021/04/26/Dart%E4%BB%8B%E7%BB%8D-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/</id>
    <published>2021-04-26T13:34:05.000Z</published>
    <updated>2021-05-13T13:46:40.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dart-介绍"><a href="#Dart-介绍" class="headerlink" title="Dart 介绍"></a>Dart 介绍</h1><hr><p>​    <a class="link"   href="https://dart.dev/" >Dart<i class="fas fa-external-link-alt"></i></a>是由谷歌开发的计算机编程语言, 它可以用于web、服务器、移动应用和物联网等领域的开发。</p><p>​    <a class="link"   href="https://dart.dev/" >Dart<i class="fas fa-external-link-alt"></i></a>诞生于2011年，号称要取代<a class="link"   href="https://www.javascript.com/" >JavaScript<i class="fas fa-external-link-alt"></i></a>。但是过去几年一直不温不火，直到<a class="link"   href="https://flutter.dev/" >Flutter<i class="fas fa-external-link-alt"></i></a>的出现现在被人们重新重视要学<a class="link"   href="https://flutter.dev/" >Flutter<i class="fas fa-external-link-alt"></i></a>的话我们首先得会<a class="link"   href="https://dart.dev/" >Dart<i class="fas fa-external-link-alt"></i></a>。</p><blockquote><p><a class="link"   href="https://dart.dev/" >Dart官网<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="Dart-环境搭建"><a href="#Dart-环境搭建" class="headerlink" title="Dart 环境搭建"></a>Dart 环境搭建</h2><hr><p>要在本地开发<a class="link"   href="https://dart.dev/" >Dart<i class="fas fa-external-link-alt"></i></a>的话首先需要安装<a class="link"   href="https://dart.dev/" >Dart SDK<i class="fas fa-external-link-alt"></i></a></p><blockquote><p><a class="link"   href="https://dart.dev/get-dart" >官方文档<i class="fas fa-external-link-alt"></i></a></p></blockquote><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p>Dart SDK支持在Windows, Linux 和 macOS上使用。</p><table><thead><tr><th></th><th>Windows</th><th>macOS</th><th>Linux</th></tr></thead><tbody><tr><td>支持  版本</td><td>Windows 10</td><td>最新的三个主要版本</td><td>最近的Linux版本，但只测试了Ubuntu 16.04</td></tr><tr><td>支持  架构</td><td>x64，ia32</td><td>x64, 对arm64的支持正在进行中</td><td>x64, ia32, arm, arm64</td></tr></tbody></table><hr><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p><a class="link"   href="https://gekorm.com/dart-windows/" >Windows(推荐)<i class="fas fa-external-link-alt"></i></a></p><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><p>如果Mac没有安装<a class="link"   href="https://brew.sh/" >brew<i class="fas fa-external-link-alt"></i></a>工具首先得安装它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap dart-lang/dart</span><br><span class="line">brew install dart</span><br></pre></td></tr></table></figure><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>如果你在AMD64(64-bit Intel)上使用Debian/Ubuntu，你可以选择以下选项之一，这两种选项都可以在新版本发布时自动更新SDK。</p><ul><li>Install using apt-get</li><li>Install a Debian package</li></ul><p>使用 apt-get 安装</p><p>执行以下代码<strong>一次性设置</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install apt-transport-https</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sh -c <span class="string">&#x27;wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -&#x27;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sh -c <span class="string">&#x27;wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list &gt; /etc/apt/sources.list.d/dart_stable.list&#x27;</span></span></span><br></pre></td></tr></table></figure><p>然后安装Dart SDK:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install dart</span></span><br></pre></td></tr></table></figure><p>安装Debian软件包</p><p>或者，下载<a class="link"   href="https://storage.googleapis.com/dart-archive/channels/stable/release/latest/linux_packages/dart_2.12.4-1_amd64.deb" >Dart SDK的Debian软件包<i class="fas fa-external-link-alt"></i></a>格式为.<code>.deb</code></p><p>修改PATH以访问所有Dart二进制文件</p><p>安装SDK后，将其<code>bin</code>目录添加到您的<code>PATH</code>中。例如，在活动终端会话中使用以下命令更改：<code>PATH</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/usr/lib/dart/bin&quot;</span></span></span><br></pre></td></tr></table></figure><p>要更改未来终端会话的<code>PATH</code>，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:/usr/lib/dart/bin&quot;&#x27;</span> &gt;&gt; ~/.profile</span></span><br></pre></td></tr></table></figure><h2 id="Dart-开发工具"><a href="#Dart-开发工具" class="headerlink" title="Dart 开发工具"></a>Dart 开发工具</h2><hr><p>Dart的开发工具有很多，如：VScode、Android Studio、IntelliJ IDEA、WebStorm等</p><p>本人主要使用<a class="link"   href="https://code.visualstudio.com/" >VScode<i class="fas fa-external-link-alt"></i></a>，因此只写VScode中配置Dart过程。</p><p>VScode具体安装过程自行百度解决。</p><h4 id="VScode搭建Dart环境"><a href="#VScode搭建Dart环境" class="headerlink" title="VScode搭建Dart环境"></a>VScode搭建Dart环境</h4><ol><li>找到VScode插件安装项搜索并安装Dart</li><li>找到VScode插件安装Code Runner(用来运行Dart程序)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dart-介绍&quot;&gt;&lt;a href=&quot;#Dart-介绍&quot; class=&quot;headerlink&quot; title=&quot;Dart 介绍&quot;&gt;&lt;/a&gt;Dart 介绍&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;​    &lt;a class=&quot;link&quot;   href=&quot;https://dart.dev</summary>
      
    
    
    
    <category term="Dart" scheme="https://blog.icscraft.top/categories/Dart/"/>
    
    
    <category term="Learn" scheme="https://blog.icscraft.top/tags/Learn/"/>
    
  </entry>
  
</feed>
